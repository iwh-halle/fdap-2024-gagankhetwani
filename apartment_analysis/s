import requests
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import statsmodels.api as sm
from lifelines import KaplanMeierFitter, CoxPHFitter
import re
import time

# Web scraping part
base_url = "https://www.wg-gesucht.de/wg-zimmer-in-Frankfurt-am-Main.41.0.1.0.html"
num_pages = 5
data = []

def get_text_or_default(element, default='N/A'):
    return element.get_text(strip=True) if element else default

for page in range(1, num_pages + 1):
    url = base_url + f"?page={page}"
    response = requests.get(url)
    response.raise_for_status()
    soup = BeautifulSoup(response.content, 'html.parser')
    listings = soup.find_all('div', class_='wgg_card offer_list_item')
    
    if not listings:
        print(f"No listings found on page {page}, stopping.")
        break

    for listing in listings:
        listing_data = {}
        link = listing.find('a', class_='detailansicht')
        full_link = link['href'] if link else 'N/A'
        listing_data['full_link'] = "https://www.wg-gesucht.de" + full_link if full_link != 'N/A' else 'N/A'
        listing_data['title'] = get_text_or_default(listing.find('h3', class_='truncate_title noprint'))
        listing_data['details'] = get_text_or_default(listing.find('div', class_='col-xs-11'))
        price = listing.find('div', class_='col-xs-3')
        listing_data['price'] = get_text_or_default(price.find('b')) if price else 'N/A'
        listing_data['availability'] = get_text_or_default(listing.find('div', class_='col-xs-5 text-center'))
        size = listing.find('div', class_='col-xs-3 text-right')
        listing_data['size'] = get_text_or_default(size.find('b')) if size else 'N/A'
        listing_data['landlord'] = get_text_or_default(listing.find('span', class_='ml5'))
        listing_data['online_status'] = 'N/A'
        for span in listing.find_all('span'):
            if 'color' in span.attrs.get('style', ''):
                listing_data['online_status'] = span.get_text(strip=True)
                break
        data.append(listing_data)
    
    print(f"Processed page {page}, found {len(listings)} listings.")
    time.sleep(3)

df = pd.DataFrame(data)
df.to_csv('wg_gesucht_frankfurt_dynamic_manual_pages.csv', index=False, encoding='utf-8')

# Data analysis part
df = pd.read_csv('wg_gesucht_frankfurt_dynamic_manual_pages.csv')

print("Initial Data Info:")
print(df.info())
print(df.head())

df.fillna(df.median(numeric_only=True), inplace=True)
df['price'] = df['price'].str.extract('(\d+)').astype(float)
df['size'] = df['size'].str.extract('(\d+)').astype(float)
df['availability'] = pd.to_datetime(df['availability'], errors='coerce')
df['num_rooms'] = df['details'].str.extract(r'(\d+)\s*Zimmer').astype(float)

def convert_online_status(status):
    match = re.search(r'(\d+)', status)
    if match:
        number = int(match.group(1))
        if 'Sekunden' in status:
            return number / 86400
        elif 'Minuten' in status:
            return number / 1440
        elif 'Stunden' in status:
            return number / 24
        elif 'Tag' in status or 'Tage' in status:
            return number
        elif re.match(r'Online: \d{2}\.\d{2}\.\d{4}', status):
            listing_date = datetime.strptime(status, 'Online: %d.%m.%Y')
            today = datetime.now()
            return (today - listing_date).days
    return np.nan

df['duration_online'] = df['online_status'].apply(convert_online_status)
df.dropna(subset=['price', 'size', 'num_rooms', 'duration_online'], inplace=True)

print("Cleaned Data Info:")
print(df.info())
print(df.head())
print(df.describe())

plt.figure(figsize=(10, 6))
sns.histplot(df['price'], bins=30, kde=True)
plt.title('Distribution of Prices')
plt.xlabel('Price (€)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['size'], bins=30, kde=True)
plt.title('Distribution of Room Sizes')
plt.xlabel('Size (m²)')
plt.ylabel('Frequency')
plt.show()

numeric_cols = df.select_dtypes(include=[np.number]).columns
if not numeric_cols.empty:
    plt.figure(figsize=(12, 8))
    sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm')
    plt.title('Correlation Matrix')
    plt.show()

X = df[['size', 'num_rooms', 'duration_online']]
y = df['price']

if not X.empty and not y.empty:
    X = sm.add_constant(X)
    model = sm.OLS(y, X).fit()
    print(model.summary())

    kmf = KaplanMeierFitter()
    kmf.fit(df['duration_online'], event_observed=(df['online_status'] != 'N/A'))
    kmf.plot_survival_function()
    plt.title('Survival Function of Listings')
    plt.xlabel('Days Online')
    plt.ylabel('Survival Probability')
    plt.show()

    cph = CoxPHFitter()
    cph_data = df[['duration_online', 'size', 'num_rooms', 'price']]
    if not cph_data.empty:
        cph.fit(cph_data, duration_col='duration_online', event_col=(df['online_status'] != 'N/A'))
        cph.plot()
        plt.title('Cox Proportional Hazards Model')
        plt.show()

    sns.pairplot(df[['price', 'size', 'num_rooms', 'duration_online']])
    plt.show()

df.to_csv('wg_gesucht_frankfurt_cleaned.csv', index=False)